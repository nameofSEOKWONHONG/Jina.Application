// <auto-generated />
using System;
using Jina.Domain.Service.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jina.Domain.Service.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240505154708_change_1")]
    partial class change_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Jina.Domain.Entity.Account.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AuditTrails", "dbo");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Account.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("생성자");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("생성일");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("수정자");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("수정일");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Jina.Domain.Entity.Account.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("생성자");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("생성일");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("설명");

                    b.Property<string>("Group")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("그룹명");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("수정자");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("수정일");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Jina.Domain.Entity.Account.Tenant", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnOrder(0)
                        .HasComment("테넌트ID");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnOrder(1)
                        .HasComment("테넌트명");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(2)
                        .HasComment("리다이렉트 url");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnOrder(3)
                        .HasComment("시간대");

                    b.HasKey("TenantId");

                    b.ToTable("Tenants", "dbo");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("생성자");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("생성일");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("활성화 여부");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("수정자");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("수정일");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureDataUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Jina.Domain.Entity.Account.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("생성자");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("생성일");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("활성화 여부");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("수정자");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("수정일");

                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Jina.Domain.Entity.Application.Menu", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("테넌트");

                    b.Property<Guid>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("생성자");

                    b.Property<string>("CreatedName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("생성자명");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("생성일");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("수정일");

                    b.Property<string>("LastModifiedName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("수정자명");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("수정일");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<Guid>("MenuGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortNo")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("TenantId", "MenuId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "MenuGroupId");

                    b.HasIndex("TenantId", "ParentMenuId");

                    b.ToTable("Menus", "application");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Application.MenuGroup", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("테넌트");

                    b.Property<Guid>("MenuGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("생성자");

                    b.Property<string>("CreatedName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("생성자명");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("생성일");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("수정일");

                    b.Property<string>("LastModifiedName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("수정자명");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("수정일");

                    b.Property<Guid>("MenuRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("SortNo")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "MenuGroupId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "MenuRoleId");

                    b.ToTable("MenuGroups", "application");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Application.MenuRole", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("테넌트");

                    b.Property<Guid>("MenuRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("생성자");

                    b.Property<string>("CreatedName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("생성자명");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("생성일");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("수정일");

                    b.Property<string>("LastModifiedName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("수정자명");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("수정일");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TenantId", "MenuRoleId");

                    b.HasIndex("TenantId");

                    b.ToTable("MenuRoles", "application");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Common.CodeGroup", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnOrder(0)
                        .HasComment("테넌트");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(1);

                    b.Property<string>("Key")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("생성자");

                    b.Property<string>("CreatedName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("생성자명");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("생성일");

                    b.Property<string>("Desc")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("수정일");

                    b.Property<string>("LastModifiedName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("수정자명");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("수정일");

                    b.Property<string>("Value")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnOrder(3);

                    b.HasKey("TenantId", "GroupCode", "Key");

                    b.HasIndex("TenantId");

                    b.ToTable("CodeGroups", "common");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Example.WeatherForecast", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("테넌트");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("도시명");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("생성자");

                    b.Property<string>("CreatedName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("생성자명");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("생성일");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("날짜");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("수정일");

                    b.Property<string>("LastModifiedName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("수정자명");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("수정일");

                    b.Property<string>("Summary")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("요약");

                    b.Property<int?>("TemperatureC")
                        .HasColumnType("int")
                        .HasComment("섭씨온도");

                    b.HasKey("TenantId", "Id");

                    b.HasIndex("TenantId");

                    b.ToTable("WeatherForecasts", "example");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Language.MultilingualContent", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("테넌트");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CultureType")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("생성자");

                    b.Property<string>("CreatedName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("생성자명");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("생성일");

                    b.Property<string>("Input")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("수정일");

                    b.Property<string>("LastModifiedName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("수정자명");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("수정일");

                    b.Property<int>("MultilingualTopicId")
                        .HasColumnType("int");

                    b.Property<string>("MultilingualTopicPrimaryCultureType")
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("MultilingualTopicTenantId")
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("TenantId", "Id", "CultureType");

                    b.HasIndex("TenantId");

                    b.HasIndex("MultilingualTopicTenantId", "MultilingualTopicId", "MultilingualTopicPrimaryCultureType");

                    b.ToTable("MultilingualContents", "language");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Language.MultilingualTopic", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("테넌트");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PrimaryCultureType")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("메인 입력 언어 타입");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("생성자");

                    b.Property<string>("CreatedName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("생성자명");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("생성일");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("수정일");

                    b.Property<string>("LastModifiedName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("수정자명");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("수정일");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("번역 주제");

                    b.HasKey("TenantId", "Id", "PrimaryCultureType");

                    b.HasIndex("TenantId");

                    b.ToTable("MultilingualTopics", "language");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Language.MultilingualTopicConfig", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("테넌트");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CultureType")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("생성자");

                    b.Property<string>("CreatedName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("생성자명");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("생성일");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasComment("수정일");

                    b.Property<string>("LastModifiedName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("수정자명");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("수정일");

                    b.Property<int>("MultilingualTopicId")
                        .HasColumnType("int");

                    b.Property<string>("MultilingualTopicPrimaryCultureType")
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("MultilingualTopicTenantId")
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("SortNo")
                        .HasColumnType("int");

                    b.HasKey("TenantId", "Id", "CultureType");

                    b.HasIndex("TenantId");

                    b.HasIndex("MultilingualTopicTenantId", "MultilingualTopicId", "MultilingualTopicPrimaryCultureType");

                    b.ToTable("MultilingualTopicConfigs", "language");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Jina.Domain.Entity.Account.Audit", b =>
                {
                    b.HasOne("Jina.Domain.Entity.Account.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Account.Role", b =>
                {
                    b.HasOne("Jina.Domain.Entity.Account.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Account.RoleClaim", b =>
                {
                    b.HasOne("Jina.Domain.Entity.Account.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jina.Domain.Entity.Account.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Jina.Domain.Entity.Account.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Role");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Account.User", b =>
                {
                    b.HasOne("Jina.Domain.Entity.Account.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Account.UserRole", b =>
                {
                    b.HasOne("Jina.Domain.Entity.Account.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jina.Domain.Entity.Account.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("Jina.Domain.Entity.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Application.Menu", b =>
                {
                    b.HasOne("Jina.Domain.Entity.Application.MenuGroup", "MenuGroup")
                        .WithMany("Menus")
                        .HasForeignKey("TenantId", "MenuGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jina.Domain.Entity.Application.Menu", "ParentMenu")
                        .WithMany("ChildMenus")
                        .HasForeignKey("TenantId", "ParentMenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MenuGroup");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Application.MenuGroup", b =>
                {
                    b.HasOne("Jina.Domain.Entity.Application.MenuRole", "MenuRole")
                        .WithMany("MenuGroups")
                        .HasForeignKey("TenantId", "MenuRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MenuRole");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Language.MultilingualContent", b =>
                {
                    b.HasOne("Jina.Domain.Entity.Language.MultilingualTopic", "MultilingualTopic")
                        .WithMany()
                        .HasForeignKey("MultilingualTopicTenantId", "MultilingualTopicId", "MultilingualTopicPrimaryCultureType");

                    b.Navigation("MultilingualTopic");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Language.MultilingualTopicConfig", b =>
                {
                    b.HasOne("Jina.Domain.Entity.Language.MultilingualTopic", "MultilingualTopic")
                        .WithMany("MultilingualTopicConfigs")
                        .HasForeignKey("MultilingualTopicTenantId", "MultilingualTopicId", "MultilingualTopicPrimaryCultureType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MultilingualTopic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Jina.Domain.Entity.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Jina.Domain.Entity.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Jina.Domain.Entity.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jina.Domain.Entity.Account.Role", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Application.Menu", b =>
                {
                    b.Navigation("ChildMenus");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Application.MenuGroup", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Application.MenuRole", b =>
                {
                    b.Navigation("MenuGroups");
                });

            modelBuilder.Entity("Jina.Domain.Entity.Language.MultilingualTopic", b =>
                {
                    b.Navigation("MultilingualTopicConfigs");
                });
#pragma warning restore 612, 618
        }
    }
}
