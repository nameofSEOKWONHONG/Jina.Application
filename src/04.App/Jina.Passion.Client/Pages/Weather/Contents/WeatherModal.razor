@using Blazored.FluentValidation
@using Jina.Domain.Example
@using System.Text.Json
@using eXtensionSharp

@inherits FeedbackComponent<WeatherForecast, WeatherForecast>

<Form Model="@SelectedItem"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      LabelColSpan="4"
      WrapperColSpan="16"
      ValidateMode="FormValidateMode.Complex"
      Size="@AntSizeLDSType.Small">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <GridRow>
        <GridCol Span="12">
            <FormItem Label="@nameof(this.SelectedItem.Id)">
                <Input Value="this.SelectedItem.Id" ReadOnly />
             </FormItem>
         </GridCol>
         <GridCol Span="12">
             <FormItem Label="@nameof(this.SelectedItem.City)">
                 <Input Value="this.SelectedItem.City" />
             </FormItem>
         </GridCol>
     </GridRow>
     <GridRow>
         <GridCol Span="12">
             <FormItem Label="@nameof(this.SelectedItem.Date)">
                 <DatePicker TValue="DateOnly?" @bind-Value="this.SelectedItem.Date" Picker="@DatePickerType.Date" />
             </FormItem>
         </GridCol>
         <GridCol Span="12">
             <FormItem Label="@nameof(this.SelectedItem.TemperatureC)">
                 <Input @bind-Value="this.SelectedItem.TemperatureC" />
             </FormItem>
         </GridCol>
     </GridRow>
     <GridRow>
         <GridCol Span="12">
             <FormItem Label="@nameof(this.SelectedItem.TemperatureF)">
                 <Input Value="this.SelectedItem.TemperatureF" ReadOnly />
             </FormItem>
         </GridCol>
         <GridCol Span="12">
             <FormItem Label="@nameof(this.SelectedItem.Summary)">
                 <Input @bind-Value="this.SelectedItem.Summary" />
             </FormItem>
         </GridCol>
         <GridCol Span="12">
         </GridCol>
     </GridRow>
     <FormItem WrapperColOffset="8" WrapperColSpan="16">
         <Button HtmlType="submit">
             Submit
         </Button>
     </FormItem>
 </Form>

 @code {
    private WeatherForecast SelectedItem;
    private FluentValidationValidator _fluentValidationValidator;

    protected override void OnInitialized()
    {
        SelectedItem = base.Options ?? new WeatherForecast();
        base.OnInitialized();
    }

    public override async Task OnFeedbackOkAsync(ModalClosingEventArgs args)
    {
        if (FeedbackRef is ConfirmRef confirmRef)
        {
            confirmRef.Config.OkButtonProps.Loading = true;
            await confirmRef.UpdateConfigAsync();
        }
        else if (FeedbackRef is ModalRef modalRef)
        {
            modalRef.Config.ConfirmLoading = true;
            await modalRef.UpdateConfigAsync();
        }

        await Task.Delay(1000);
        // // only the input's value equals the initialized value, the OK button will close the confirm dialog box
        if (this.SelectedItem.xIsEmpty())
        {
            args.Cancel = true;
        }        
        else
        {
            // method 1(not recommended): await (FeedbackRef as ConfirmRef<string>)!.OkAsync(value);
            // method 2: await (FeedbackRef as IOkCancelRef<string>)!.OkAsync(value);
            await (FeedbackRef as IOkCancelRef<WeatherForecast>)!.OkAsync(this.SelectedItem);
        }


        await base.OnFeedbackOkAsync(args);
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(SelectedItem)}");
        _ = base.FeedbackRef.CloseAsync();
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(SelectedItem)}");
    }
}