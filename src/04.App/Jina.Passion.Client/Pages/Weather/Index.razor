@page "/weathers/index"

@using Jina.Domain.Example
@using Jina.Domain.SharedKernel
@using Jina.Passion.Client.Base
@using Jina.Passion.Client.Base.Abstract
@using Jina.Passion.Client.Client.Base
@using Jina.Passion.Client.Pages.Weather.ViewModels

<Tabs Type="@TabType.EditableCard" HideAdd
      @ref="tabs"
      DefaultActiveKey="1"
      @bind-ActiveKey="@activeKey" 
      OnChange="OnTabChange"
      Animated>
    <TabPane Key="1" Tab="Weather List" Closable="false">        
        <ChildContent>
            <Jina.Passion.Client.Pages.Weather.Contents.WeatherList @ref="tablePage" OnChange="TabChange"/>
        </ChildContent>
        <TabContextMenu>
            <Menu>
                <MenuItem @onclick="Favorite">Add Favorite</MenuItem>
            </Menu>
        </TabContextMenu>
    </TabPane>
    @foreach(var pane in panes)
    {
        <TabPane Key="@pane.Key" Tab="@pane.Title" Closable="@pane.Closable">
            <ChildContent>
                <Jina.Passion.Client.Pages.Weather.Contents.Weather SelectedItem="pane.WeatherForecastDto" />
            </ChildContent>
            <TabContextMenu>
                <Menu>
                    <MenuItem OnClick="@(()=>Close(pane))" Disabled="!pane.Closable">Close @pane.Title</MenuItem>
                </Menu>
            </TabContextMenu>
        </TabPane>
    }    
</Tabs>

@code {
    [Inject]
    public WeatherViewModel ViewModel { get; set; }

    private Tabs tabs;
    string activeKey { get; set; } = "1";
    private WeatherForecastDto selectedItem;
    private TablePageComponent<DlgOptions<bool>, IEnumerable<WeatherForecastDto>> tablePage;

    public record Pane(string Title, string Content, string Key, WeatherForecastDto WeatherForecastDto, bool Closable = true);

    private int newTabIndex;

    List<Pane> panes = new List<Pane>();


    void OnTabChange(string key) => Console.WriteLine($"tab change:{key}");

    void TabChange(string key) {
        var newkey = panes.Count + 1;
        activeKey = $"newTab{this.ViewModel.SelectedItem.Id}";

        panes.Add(new Pane(this.ViewModel.SelectedItem.City.ToString(), this.ViewModel.SelectedItem.Id.ToString(), activeKey, this.ViewModel.SelectedItem, true));
        StateHasChanged();
    }

    void Close(Pane pane)
    {
        panes.Remove(pane);
        StateHasChanged();
    }

    async Task Favorite()
    {
        string menuName = "Weather List";
        string key = $"updatable-{DateTime.Now.Ticks}";
        var config = new MessageConfig()
        {
            Content = "Progress...",
            Key = key
        };

        this.MessageService.Loading(config);
        await Task.Delay(2000);

        config.Content = $"added favorite menu : {menuName}";
        config.Duration = 2;

        await this.MessageService.Success(config);
    }
}