@page "/weathers/index"

@using Jina.Domain.Example
@using Jina.Passion.Client.Base
@using Jina.Passion.Client.Common.Consts
@using Jina.Passion.Client.Layout.ViewModels
@using Jina.Passion.Client.Pages.Weather.ViewModels

@inject IMessageService MessageService
@attribute [ReuseTabsPage(Title = "Weather")]

<PageContainer>
    <Content>
        <Tabs Type="@TabType.EditableCard" HideAdd
              @ref="tabs"
              DefaultActiveKey="1"
              @bind-ActiveKey="@activeKey"
              OnChange="OnTabChange"
              Size="TabSize.Small"
              TabBarStyle="@StyleConst.DefaultTabBar"
              Animated>
            <TabPane Key="1" Tab="Weather List" Closable="false">
                <ChildContent>
                    <Jina.Passion.Client.Pages.Weather.Contents.WeatherList @ref="tablePage" OnChange="TabChange"/>
                </ChildContent>
                <TabContextMenu>
                    <Menu>
                        <MenuItem @onclick="Favorite">Add Favorite</MenuItem>
                    </Menu>
                </TabContextMenu>
            </TabPane>
            @foreach (var pane in panes)
            {
                <TabPane Key="@pane.Key" Tab="@pane.Title" Closable="@pane.Closable">
                    <ChildContent>
                        <Jina.Passion.Client.Pages.Weather.Contents.Weather SelectedItem="pane.WeatherForecastDto"/>
                    </ChildContent>
                    <TabContextMenu>
                        <Menu>
                            <MenuItem OnClick="@(() => Close(pane))" Disabled="!pane.Closable">Close @pane.Title</MenuItem>
                        </Menu>
                    </TabContextMenu>
                </TabPane>
            }
        </Tabs>
    </Content>
</PageContainer>

@code {
    [Inject] public WeatherViewModel ViewModel { get; set; }
    [Inject] public NotificationViewModel RightContentViewModel { get; set; }

    private Tabs tabs;
    string activeKey { get; set; } = "1";
    private TablePageComponent<WeatherForecastRequest, WeatherViewModel, DlgOptions<bool>, IEnumerable<WeatherForecastRequest>> tablePage;

    public record Pane(string Title, string Content, string Key, WeatherForecastRequest WeatherForecastDto, bool Closable = true);

    private int newTabIndex;

    List<Pane> panes = new List<Pane>();


    void OnTabChange(string key) => Console.WriteLine($"tab change:{key}");

    void TabChange(string key) {
        var newkey = panes.Count + 1;
        activeKey = $"newTab{this.ViewModel.SelectedItem.Id}";

        panes.Add(new Pane(this.ViewModel.SelectedItem.City.ToString(), this.ViewModel.SelectedItem.Id.ToString(), activeKey, this.ViewModel.SelectedItem, true));
        StateHasChanged();
    }

    void Close(Pane pane)
    {
        panes.Remove(pane);
        StateHasChanged();
    }

    async Task Favorite()
    {
        string menuName = "Weather List";
        string key = $"updatable-{DateTime.Now.Ticks}";
        var config = new MessageConfig()
        {
            Content = "Progress...",
            Key = key
        };

        using(var task = this.MessageService.Loading(config))
        {   
            await Task.Delay(2000);
            config.Content = $"added favorite menu : {menuName}";
            config.Duration = 2;

            await this.MessageService.Success(config);
        }        

        RightContentViewModel.AddFavoriteMenu(new NoticeIconData()
        {
            Title = menuName,
            Description = menuName,
            Avatar = menuName,
            Key = Guid.NewGuid().ToString("N"),
            Read = false,
            Datetime = DateTime.Now,
            Extra = "/"
        });
    }
}