@using AntDesign.TableModels
@using Jina.Domain.Account
@using Jina.Domain.Account.Request
@using Jina.Domain.Shared
@using Jina.Domain.Shared.Abstract
@using Jina.Passion.Client.Base
@using Jina.Passion.Client.Layout.ViewModels
@using Jina.Passion.Client.Pages.Account.ViewModels

@inherits TablePageComponent<UserDto, UserListViewModel, DlgOptions<bool>, IEnumerable<UserDto>>

<PageHeader Class="site-page-header" Title="User List" Subtitle="user list" />

<PageContainer>
    <Content>
        <div>
            <Form Model="searchRequest" Name="search" Class="ant-advanced-search-form">
                <GridRow>
                    <GridCol Span="6" @key="nameof(context.Name)">
                        <FormItem Label="@nameof(context.Name)">
                            <Input @bind-Value="@(context.Name)" Style="width: 80%;" Size="@InputSize.Small" />
                        </FormItem>
                    </GridCol>
                    <GridCol Span="6" @key="nameof(context.Email)">
                        <FormItem Label="@nameof(context.Email)">
                            <Input @bind-Value="@(context.Email)" Style="width: 80%;" Size="@InputSize.Small" />
                        </FormItem>
                    </GridCol>
                </GridRow>
            </Form>
        </div>
        <Divider />
        <div>
            <GridRow>
                <GridCol Span="24" Style="text-align:right;">
                    <Button Type="primary" @onclick="()=> OnSearch(null, null)" Size="@ButtonSize.Small">Search</Button>
                    <Button @onclick="() => AddNotification()" Type="primary" Size="@ButtonSize.Small" Style="margin-bottom:16px">Notification</Button>
                    <Button @onclick="() => OnAddItem(null)" Type="primary" Size="@ButtonSize.Small" Style="margin-bottom:16px">Add</Button>
                    <Button Danger @onclick="() => OnRemoveRange(null)" Type="primary" Size="@ButtonSize.Small" Style="margin-bottom:16px">Remove</Button>
                </GridCol>
            </GridRow>
        </div>
        <Table @ref="Table"
               TItem="UserDto"
               DataSource="this.ViewModel.Items"
               OnRowClick="OnSelectChanged"
               @bind-SelectedRows="this.ViewModel.SelectedItems"
               Bordered=@true
               Title="User List"
               Size="TableSize.Small"
               OnChange="OnTableChange"
               @bind-PageIndex="this.Paginateion.PageIndex"
               @bind-PageSize="this.Paginateion.PageSize"
               @bind-Total="this.Paginateion.Total"
               PaginationPosition="@this.Paginateion.DefaultPagingPosition"
               Resizable
               RowKey="m=>m.Id">
             <ChildContent>
                 <Selection Key="@(context.Id)" />
                 <PropertyColumn Property="m => m.Name" Sortable DefaultSortOrder="SortDirection.Ascending">
                     @* <a @onclick='() => OnSelectChanged(context)'>@context.Name</a> *@
                 </PropertyColumn>
                 <PropertyColumn Property="m => m.Email" />
                 <PropertyColumn Property="m => m.Phone" />
                 <PropertyColumn Property="m => m.RoleName" />
                 <ActionColumn Title="Action">
                     <Popconfirm Title="Sure to delete?"
                                 OnConfirm="()=> OnRemove(null)"
                                 OkText="Yes"
                                 CancelText="No">
                         <a>Delete</a>
                     </Popconfirm>
                 </ActionColumn>
             </ChildContent>
             <PaginationTemplate>
                 <Pagination Class="@(context.PaginationClass + " my-custom-pagination")"
                             Total="context.Total"
                             PageSize="context.PageSize"
                             Current="context.PageIndex"
                             ShowSizeChanger
                             OnChange="context.HandlePageChange" />
             </PaginationTemplate>
         </Table>
     </Content>

     <ChildContent>
     </ChildContent>
 </PageContainer>

 @code {
    [Parameter]
    public EventCallback<string> OnSelectedChange { get; set; }

    private UserSearchRequest searchRequest { get; set; } = new();

    [Inject] public NotificationViewModel RightContentViewModel { get; set; }

    protected override Task OnSetupAsync()
    {
        return base.OnSetupAsync();
    }

    protected override Task OnDlgParameterSetupAsync()
    {
        return base.OnDlgParameterSetupAsync();
    }

    public override async Task OnSearch(QueryModel query, Func<int, int, string, string, Task<IPaginatedResult>> callback)
    {
        callback = async (pageNo, pageSize, sort, order) => await ViewModel.GetUsersAsync(new PaginatedRequest<UserDto>()
        {
            PageNo = pageNo,
            PageSize = pageSize,
            SortName = sort,
            OrderBy = order,
            SearchData = new UserDto()
            {
                Email = searchRequest.Email,
                Name = searchRequest.Name,
            }
        });
        await base.OnSearch(query, callback);
    }

    public override void OnSelectChanged(RowData<UserDto> item)
    {
        base.OnSelectChanged(item);
        if (OnSelectedChange.HasDelegate)
        {
            OnSelectedChange.InvokeAsync("Weather");
        }
    }

    public override async Task OnRemove(Func<Task<IResults<bool>>> callback)
    {
        callback = async () =>
        {
            return await ViewModel.RemoveAsync(this.ViewModel.SelectedItem.Id);
        };
        await base.OnRemove(callback);
    }

    public override async Task OnRemoveRange(Func<Task<IResults<bool>>> callback)
    {
        callback = async () =>
        {
            return await ViewModel.RemoveRangeAsync();
        };
        await base.OnRemoveRange(callback);
    }

    public override async Task OnAddItem(Func<Task<IResultBase>> callback)
    {
        var options = new ModalOptions()
            {
                Maximizable = true,
                Centered = true,
                DefaultMaximized = true
            };
        // var options = new ConfirmOptions()
        //     {
        //         Width = "80%",
        //         OnOk = e =>
        //         {
        //             return Task.CompletedTask;
        //         },
        //         OnCancel = e =>
        //         {
        //             return Task.CompletedTask;
        //         },
        //     };
        var confirmd = await this.ModalService.CreateModalAsync<User, DlgOptions<UserDto>, UserDto>(options, new DlgOptions<UserDto>()
            {
                Param = new UserDto()
            });
        confirmd.OnOpen = () =>
        {
            return Task.CompletedTask;
        };

        confirmd.OnClose = () =>
        {
            return Task.CompletedTask;
        };

        confirmd.OnOk = result =>
        {
            //Console.WriteLine(result.xToJson());
            return Task.CompletedTask;
        };
    }

    private void AddNotification()
    {
        RightContentViewModel.AddFavoriteMenu(new NoticeIconData()
            {
                Title = "test",
                Description = "test",
                Avatar = "test",
                Key = Guid.NewGuid().ToString("N"),
                Read = false,
                Datetime = DateTime.Now,                
            });
    }
}