@using AntDesign.TableModels
@using Jina.Passion.Client.Base
@using Jina.Passion.Client.Base.Abstract
@using Jina.Passion.Client.Client.Base
@using Jina.Passion.Client.Pages.Weather.ViewModels
@using eXtensionSharp

@inherits TablePageComponent<DlgOptions<bool>, bool>

<PageContainer>
    <Content>
        <div>            
            <Row Gutter="24">
                <GridRow>
                    <GridCol Span="6">
                        <SimpleSelect DefaultValue="" Style="width: auto;"                                      
                                      OnSelectedItemChanged="@(item => SelectChanged(item))">
                            <SelectOptions>
                                @foreach (var item in this.menuRoleTemplate)
                                {
                                    <SimpleSelectOption Value="@item.RoleName" Label="@item.RoleName"/>
                                }
                            </SelectOptions>
                        </SimpleSelect>
                    </GridCol>
                    <GridCol Span="6">
                    </GridCol>
                    <GridCol Span="6">
                    </GridCol>
                </GridRow>                
            </Row>
            <Row>
                <GridCol Span="24" Style="text-align:right;">
                    <Button Type="primary" HtmlType="submit" Size="@ButtonSize.Small">Search</Button>
                    @* <Button Style="margin: 0 8px;" OnClick="()=>{searchValue.Reset();}">Clear</Button> *@
                </GridCol>
            </Row>
        </div>
        <br />
        <div>
            <GridRow Justify="end">
                <GridCol Span="4"></GridCol>
                <GridCol Span="4"></GridCol>
                <GridCol Span="4"></GridCol>
                <GridCol Span="2">
                    <Button Type="primary" Size="@ButtonSize.Small" Style="margin-bottom:16px">
                        Add
                    </Button>
                    <Button Type="primary" Size="@ButtonSize.Small" Style="margin-bottom:16px">
                        Remove
                    </Button>
                </GridCol>
            </GridRow>
        </div>
        <Table @ref="table"
               TItem="MenuTemplate"
               DataSource="selectedMenuTemplate"
               Bordered=@true
               Loading="Loading"
               Title="Weather List"
               Size="TableSize.Small"
               Resizable
                RowKey="m=>m.Id">
             <Selection Key="@(context.Id.ToString())" />
             <PropertyColumn Property="m => m.Id" />
             <PropertyColumn Property="m => m.MenuName" />
            <PropertyColumn Property="m => m.View">
                 <Switch @bind-Value="@context.View" />
            </PropertyColumn>
            <PropertyColumn Property="m => m.Read">
                 <Switch @bind-Value="@context.Read" />
            </PropertyColumn>
             <PropertyColumn Property="m => m.Write">
                 <Switch @bind-Value="@context.Write" />
             </PropertyColumn>
             <PropertyColumn Property="m => m.Import">
                 <Switch @bind-Value="@context.Import" />
             </PropertyColumn>
             <PropertyColumn Property="m => m.Export">
                 <Switch @bind-Value="@context.Export" />
             </PropertyColumn>
        </Table>
    </Content>

    <ChildContent>
    </ChildContent>
</PageContainer>

 @code {
    Table<MenuTemplate> table;
    List<MenuRoleTemplate> menuRoleTemplate;
    List<MenuTemplate> selectedMenuTemplate;
    protected override Task OnLoadAsync()
    {
        Loading = true;
        menuRoleTemplate = new List<MenuRoleTemplate>();

        var id = 1;
        var t = new string[] { "admin", "basic" };
        for(var i=0; i<2; i++)
        {
            int input = 123450;
            string output = "";

            var item = new MenuRoleTemplate();
            item.Menus = new();
            item.RoleName = t[i];
            if(i >= 1)
            {
                input = 12345670;
            }
            while (input > 0)
            {
                int current = input % 10;
                input /= 10;

                if (current == 0)
                    current = 10;

                output = (char)((char)'A' + (current - 1)) + output;
                item.Menus.Add(new MenuTemplate()
                    {
                        Id = id,
                        MenuName = output,
                        Export = i == 0 ? true : false,
                        Import = i == 0 ? true : false,
                        Read = i == 0 ? true : false,
                        Write = i == 0 ? true : false,
                        View = i == 0 ? true : false
                    });
                id += 1;
            }
            menuRoleTemplate.Add(item);
        }

        selectedMenuTemplate = menuRoleTemplate.First().Menus;
        Loading = false;

        return base.OnLoadAsync();
    }

    void SelectChanged(string key)
    {        
        this.selectedMenuTemplate = this.menuRoleTemplate.First(m => m.RoleName == key).Menus;
        this.StateChanged();
    }

    class MenuRoleTemplate
    {
        public string RoleName { get; set; }
        public List<MenuTemplate> Menus { get; set; }
    }

    class MenuTemplate
    {
        public int Id { get; set; }
        public string MenuName { get; set; }
        public bool Read { get; set; }
        public bool Write { get; set; }
        public bool View { get; set; }
        public bool Export { get; set; }
        public bool Import { get; set; }
    }

}